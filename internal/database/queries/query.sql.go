// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package queries

import (
	"context"

	"github.com/google/uuid"
)

const deleteURL = `-- name: DeleteURL :exec
UPDATE urls
SET is_deleted = TRUE
WHERE url_id = $1
  AND uid = $2 RETURNING id, long_url, base_url, url_id, created_at, uid, is_deleted
`

type DeleteURLParams struct {
	UrlID string
	Uid   uuid.UUID
}

func (q *Queries) DeleteURL(ctx context.Context, arg DeleteURLParams) error {
	_, err := q.exec(ctx, q.deleteURLStmt, deleteURL, arg.UrlID, arg.Uid)
	return err
}

const getURL = `-- name: GetURL :one
SELECT id, long_url, base_url, url_id, created_at, uid, is_deleted
FROM urls
WHERE url_id = $1 LIMIT 1
`

func (q *Queries) GetURL(ctx context.Context, urlID string) (Url, error) {
	row := q.queryRow(ctx, q.getURLStmt, getURL, urlID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.BaseUrl,
		&i.UrlID,
		&i.CreatedAt,
		&i.Uid,
		&i.IsDeleted,
	)
	return i, err
}

const getURLByLong = `-- name: GetURLByLong :one
SELECT id, long_url, base_url, url_id, created_at, uid, is_deleted
FROM urls
WHERE long_url = $1
  AND is_deleted = FALSE LIMIT 1
`

func (q *Queries) GetURLByLong(ctx context.Context, longUrl string) (Url, error) {
	row := q.queryRow(ctx, q.getURLByLongStmt, getURLByLong, longUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.BaseUrl,
		&i.UrlID,
		&i.CreatedAt,
		&i.Uid,
		&i.IsDeleted,
	)
	return i, err
}

const getUserURLs = `-- name: GetUserURLs :many
SELECT id, long_url, base_url, url_id, created_at, uid, is_deleted
FROM urls
WHERE uid = $1
  AND is_deleted = FALSE
`

func (q *Queries) GetUserURLs(ctx context.Context, uid uuid.UUID) ([]Url, error) {
	rows, err := q.query(ctx, q.getUserURLsStmt, getUserURLs, uid)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Url
	for rows.Next() {
		var i Url
		if err := rows.Scan(
			&i.ID,
			&i.LongUrl,
			&i.BaseUrl,
			&i.UrlID,
			&i.CreatedAt,
			&i.Uid,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const storeURL = `-- name: StoreURL :one
INSERT INTO urls (long_url, base_url, url_id, uid)
VALUES ($1, $2, $3, $4) RETURNING id, long_url, base_url, url_id, created_at, uid, is_deleted
`

type StoreURLParams struct {
	LongUrl string
	BaseUrl string
	UrlID   string
	Uid     uuid.UUID
}

func (q *Queries) StoreURL(ctx context.Context, arg StoreURLParams) (Url, error) {
	row := q.queryRow(ctx, q.storeURLStmt, storeURL,
		arg.LongUrl,
		arg.BaseUrl,
		arg.UrlID,
		arg.Uid,
	)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.BaseUrl,
		&i.UrlID,
		&i.CreatedAt,
		&i.Uid,
		&i.IsDeleted,
	)
	return i, err
}
