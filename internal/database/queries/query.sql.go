// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package queries

import (
	"context"
)

const getURL = `-- name: GetURL :one
SELECT id, long_url, base_url, url_id, created_at
FROM urls
WHERE url_id = $1 LIMIT 1
`

func (q *Queries) GetURL(ctx context.Context, urlID string) (Url, error) {
	row := q.queryRow(ctx, q.getURLStmt, getURL, urlID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.BaseUrl,
		&i.UrlID,
		&i.CreatedAt,
	)
	return i, err
}

const getURLByLong = `-- name: GetURLByLong :one
SELECT id, long_url, base_url, url_id, created_at
FROM urls
WHERE long_url = $1 LIMIT 1
`

func (q *Queries) GetURLByLong(ctx context.Context, longUrl string) (Url, error) {
	row := q.queryRow(ctx, q.getURLByLongStmt, getURLByLong, longUrl)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.BaseUrl,
		&i.UrlID,
		&i.CreatedAt,
	)
	return i, err
}

const storeURL = `-- name: StoreURL :one
INSERT INTO urls (long_url, base_url, url_id)
VALUES ($1, $2, $3) RETURNING id, long_url, base_url, url_id, created_at
`

type StoreURLParams struct {
	LongUrl string
	BaseUrl string
	UrlID   string
}

func (q *Queries) StoreURL(ctx context.Context, arg StoreURLParams) (Url, error) {
	row := q.queryRow(ctx, q.storeURLStmt, storeURL, arg.LongUrl, arg.BaseUrl, arg.UrlID)
	var i Url
	err := row.Scan(
		&i.ID,
		&i.LongUrl,
		&i.BaseUrl,
		&i.UrlID,
		&i.CreatedAt,
	)
	return i, err
}
